{
  
    
        "post0": {
            "title": "Title",
            "content": "Estimating COVID-19&#39;s $R_t$ in Real-Time for India . toc: true | badges: false | comments: true | metadata_key1: metadata_value1 | metadata_key2: metadata_value2 | . Estimating COVID-19&#39;s $R_t$ in Real-Time . Based on Kevin Systrom&#39;s work which in turns builds on Bettencourt &amp; Ribeiro 2008 . In any epidemic, $R_t$ is the measure known as the effective reproduction number. It&#39;s the number of people who become infected per infectious person at time $t$. The most well-known version of this number is the basic reproduction number: $R_0$ when $t=0$. However, $R_0$ is a single measure that does not adapt with changes in behavior and restrictions. . As a pandemic evolves, increasing restrictions (or potential releasing of restrictions) change $R_t$. Knowing the current $R_t$ is essential. When $R&gt;1$, the pandemic will spread through the entire population. If $R_t&lt;1$, the pandemic will grow to some fixed number less than the population. The lower $R_t$, the more manageable the situation. The value of $R_t$ helps us (1) understand how effective our measures have been controlling an outbreak and (2) gives us vital information about whether we should increase or reduce restrictions based on our competing goals of economic prosperity and human safety. Well-respected epidemiologists argue that tracking $R_t$ is the only way to manage through this crisis. . So far, there has been no similar work in India. This compliments the work Prof. Shamika Ravi where she tracks Compounded Daily Growth to understand the pandemic response. . More importantly, it is not useful to understand $R_t$ at a national level. . Instead, to manage this crisis effectively, we need a local (state, district and/or city) level granularity of $R_t$. . Real-World Application to Indian Data . Setup . Load Indian state case data from the covid19india.org crowdsource database . Taking a look at the state, we need to start the analysis when there are a consistent number of cases each day. Find the last zero new case day and start on the day after that. . Also, case reporting is very erratic based on testing backlogs, etc. To get the best view of the &#39;true&#39; data we can, I&#39;ve applied a gaussian filter to the time series. This is obviously an arbitrary choice, but you&#39;d imagine the real world process is not nearly as stochastic as the actual reporting. . The Result . Below you can see every day (row) of the posterior distribution plotted simultaneously. The posteriors start without much confidence (wide) and become progressively more confident (narrower) about the true value of $R_t$ . Plotting in the Time Domain with Credible Intervals . Since our results include uncertainty, we&#39;d like to be able to view the most likely value of $R_t$ along with its highest-density interval. . What is the plot saying? . The red dots represents most likely value of $R_t$. The shaded gray area is the 95% confidence interval and true $R_0$ can be within the grey region. . | When $R_t$ &gt;1, the pandemic will spread through the entire population. If $R_t$&lt;1, the pandemic will grow to some fixed number less than the population. The lower $R_t$, the more manageable the situation. . | . Plotting $R_t$ for selected states . Plot Select States . Find the data . Find the state wise $R_t$ data here as a csv for easy download: https://github.com/meghanabhange/CovidSeer/blob/master/_notebooks/rt.csv . Southern States Summary . Kerala: $R_t$ has been lower than 1 for a while -- and has been TRENDING TO ZERO. This rightly deserves applause. | Tamil Nadu: Trending and staying below 1 | Telangana: In addition to not sharing district wise numbers, Telangana has most likely shot up above 1 after a short dip. They seem to have taken the worst hit from the expansion of Tableeghi Jamaat cluster. | Karnataka: While it was trending to 1 towards the start of April, it&#39;s rising quickly again | . Share with Friends? .",
            "url": "https://meghanabhange.github.io/CovidSeer/2020/04/18/IndiaRt.html",
            "relUrl": "/2020/04/18/IndiaRt.html",
            "date": " • Apr 18, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Estimating COVID-19's $R_t$ in Real-Time",
            "content": "Estimating COVID-19&#39;s $R_t$ in Real-Time . Kevin Systrom notebook - April 12 . In any epidemic, $R_t$ is the measure known as the effective reproduction number. It&#39;s the number of people who become infected per infectious person at time $t$. The most well-known version of this number is the basic reproduction number: $R_0$ when $t=0$. However, $R_0$ is a single measure that does not adapt with changes in behavior and restrictions. . As a pandemic evolves, increasing restrictions (or potential releasing of restrictions) change $R_t$. Knowing the current $R_t$ is essential. When $R&gt;1$, the pandemic will spread through the entire population. If $R_t&lt;1$, the pandemic will grow to some fixed number less than the population. The lower $R_t$, the more manageable the situation. The value of $R_t$ helps us (1) understand how effective our measures have been controlling an outbreak and (2) gives us vital information about whether we should increase or reduce restrictions based on our competing goals of economic prosperity and human safety. Well-respected epidemiologists argue that tracking $R_t$ is the only way to manage through this crisis. . Yet, today, to my knowledge there is no real-time tracking of $R_t$ in United States. In fact, the only real-time measure I&#39;ve seen has been for Hong Kong. More importantly, it is not useful to understand $R_t$ at a national level. Instead, to manage this crisis effectively, we need a local (state, county and/or city) level granularity of $R_t$. . What follows is a solution to this problem at the US State level. It&#39;s a modified version of a solution created by Bettencourt &amp; Ribeiro 2008 to estimate real-time $R_t$ using a Bayesian approach. While I have stayed true to most of their process, my solution differs in an important way that I will call out clearly. . If you have questions, comments, or improvments feel free to get in touch: hello@systrom.com. And if it&#39;s not entirely clear, I&#39;m not an epidemiologist. At the same time, data is data, and statistics are statistics and this is based on work by well-known epidemiologists so calibrate accordingly. In the meantime, I hope you can learn something new as I did by reading through this example. Feel free to take this work and apply it elsewhere – internationally or to counties in the United States. . Bettencourt &amp; Ribeiro&#39;s Approach . Every day, we learn how many more people have COVID-19. This new case count gives us a clue about the current value of $R_t$. We also, figure that the value of $R_t$ today is related to the value of $R_{t-1}$ (yesterday&#39;s value) and every previous value of $R_{t-m}$ for that matter. . With these insights, the authors use Bayes&#39; rule to update their beliefs about the true value of $R_t$ based on how many new cases have been reported each day. . This is Bayes&#39; Theorem as we&#39;ll use it: . $$ P(R_t|k)= frac{P(R_t) cdot mathcal{L}(R_t|k)}{P(k)} $$ . This says that, having seen $k$ new cases, we believe the distribution of $R_t$ is equal to: . The prior beliefs of the value of $P(R_t)$ without the data ... | times the likelihood of $R_t$ given that we&#39;ve seen $k$ new cases ... | divided by the probability of seeing this many cases in general. | . Importantly, $P(k)$ is a constant, so the numerator is proportional to the posterior. Since all probability distributions sum to 1.0, we can ignore $P(k)$ and normalize our posterior to sum to 1.0: . $$ P(R_t|k) propto P(R_t) cdot mathcal{L}(R_t|k) $$ . This is for a single day. To make it iterative: every day that passes, we use yesterday&#39;s conclusion (ie. posterior) $P(R_{t-1}|k_{t-1})$ to be today&#39;s prior $P(R_t)$ so on day two: . $$ P(R_2|k) propto P(R_0) cdot mathcal{L}(R_2|k_2) cdot mathcal{L}(R_1|k_1) $$ . And more generally: . $$ P(R_t|k_t) propto P(R_0) cdot { displaystyle prod^{T}_{t=0}} mathcal{L}(R_t|k_t) $$ . With a uniform prior $P(R_0)$, this reduces to: . $$ P(R_t|k_t) propto { displaystyle prod^{T}_{t=0}} mathcal{L} left(R_t|k_t right) $$ . My Proposed Modification . This works fine, but it suffers from an issue: the posterior on any given day is equally influenced by the distant past as much as the recent day. For epidemics that have $R_t&gt;1$ for a long time and then become under control ($R_t&lt;1$), the posterior gets stuck. It cannot forget about the many days where $R_t&gt;1$ so eventually $P(R_t|k)$ asymptotically approaches 1 when we know it&#39;s well under 1. The authors note this in the paper as a footnote. Unfortunately this won&#39;t work for us. The most critical thing to know is when we&#39;ve dipped below the 1.0 threshold! . So, I propose to only incorporate the last $m$ days of the likelihood function. By doing this, the algorithm&#39;s prior is built based on the recent past which is a much more useful prior than the entire history of the epidemic. So this simple, but important change leads to the following: . $$ P(R_t|k_t) propto { displaystyle prod^{T}_{t=T-m}} mathcal{L} left(R_t|k_t right) $$ . While this takes the last $m$ priors into account equally, you can decide to apply a windowing function (such as an exponential) to favor recent priors over more distant. . Choosing a Likelihood Function $ mathcal{L} left(R_t|k_t right)$ . A likelihood function function says how likely a value of $R_t$ is given an observed number of new cases $k$. . Any time you need to model &#39;arrivals&#39; over some time period of time, statisticians like to use the Poisson Distribution. Given an average arrival rate of $ lambda$ new cases per day, the probability of seeing $k$ new cases is distributed according to the Poisson distribution: . $$P(k| lambda) = frac{ lambda^k e^{- lambda}}{k!}$$ . Note:this was a terse expression which makes it tricky. All I did was to make $k$ a column. By giving it a column for $k$ and a &#39;row&#39; for lambda it will evaluate the pmf over both and produce an array that has $k$ rows and lambda columns. This is an efficient way of producing many distributions all at once, and you will see it used again below! . The Poisson distribution says that if you think you&#39;re going to have $ lambda$ cases per day, you&#39;ll probably get that many, plus or minus some variation based on chance. . But in our case, we know there have been $k$ cases and we need to know what value of $ lambda$ is most likely. In order to do this, we fix $k$ in place while varying $ lambda$. This is called the likelihood function. . For example, imagine we observe $k=20$ new cases, and we want to know how likely each $ lambda$ is: . This says that if we see 20 cases, the most likely value of $ lambda$ is (not surprisingly) 20. But we&#39;re not certain: it&#39;s possible lambda was 21 or 17 and saw 20 new cases by chance alone. It also says that it&#39;s unlikely $ lambda$ was 40 and we saw 20. . Great. We have $ mathcal{L} left( lambda_t|k_t right)$ which is parameterized by $ lambda$ but we were looking for $ mathcal{L} left(R_t|k_t right)$ which is parameterized by $R_t$. We need to know the relationship between $ lambda$ and $R_t$ . Connecting $ lambda$ and $R_t$ . The key insight to making this work is to realize there&#39;s a connection between $R_t$ and $ lambda$. The derivation is beyond the scope of this notebook, but here it is: . $$ lambda = k_{t-1}e^{ gamma(R_t-1)}$$ . where $ gamma$ is the reciprocal of the serial interval (about 4 days for COVID19). Since we know every new case count on the previous day, we can now reformulate the likelihood function as a Poisson parameterized by fixing $k$ and varying $R_t$. . $$ lambda = k_{t-1}e^{ gamma(R_t-1)}$$ . $$ mathcal{L} left(R_t|k right) = frac{ lambda^k e^{- lambda}}{k!}$$ . Evaluating the Likelihood Function . To contiue our example, let&#39;s imagine a sample of new case counts $k$. What is the likelihood of different values of $R_t$ on each of those days? . You can see that each day we have a independent guesses for $R_t$. The goal is to combine the information we have about previous days with the current day. To do this, we use Bayes&#39; theorem. . Performing the Bayesian Update . To perform the Bayesian update, we need to multiply the likelihood by the prior (which is just the previous day&#39;s likelihood) to get the posteriors. Let&#39;s do that using the cumulative product of each successive day: . Notice how on Day 1, our posterior matches Day 1&#39;s likelihood from above? That&#39;s because we have no information other than that day. However, when we update the prior using Day 2&#39;s information, you can see the curve has moved left, but not nearly as left as the likelihood for Day 2 from above. This is because Bayesian updating uses information from both days and effectively averages the two. Since Day 3&#39;s likelihood is in between the other two, you see a small shift to the right, but more importantly: a narrower distribution. We&#39;re becoming more confident in our believes of the true value of $R_t$. . From these posteriors, we can answer important questions such as &quot;What is the most likely value of $R_t$ each day?&quot; . We can also obtain the highest density intervals for $R_t$: . Note: I apologize in advance for the clunky brute force HDI algorithm. Please let me know if there are better ones out there. . Finally, we can plot both the most likely values for $R_t$ and the HDIs over time. This is the most useful representation as it shows how our beliefs change with every day. . We can see that the most likely value of $R_t$ changes with time and the highest-density interval narrows as we become more sure of the true value of $R_t$ over time. Note that since we only had four days of history, I did not apply my windowing modification to this sample. Next, however, we&#39;ll turn to a real-world application where this modification is necessary. . Real-World Application to US Data . Setup . Load US state case data from the NYT archive . Taking a look at the state, we need to start the analysis when there are a consistent number of cases each day. Find the last zero new case day and start on the day after that. . Also, case reporting is very erratic based on testing backlogs, etc. To get the best view of the &#39;true&#39; data we can, I&#39;ve applied a gaussian filter to the time series. This is obviously an arbitrary choice, but you&#39;d imagine the real world process is not nearly as stochastic as the actual reporting. . Running the Algorithm . Just like the example before, we create lambda based on the previous day&#39;s counts from all values of $R_t$. Unlike the previous example, I now evaluate the log of the Poisson. Why? It makes windowing easier. . Since $ log{ab}= log{a}+ log{b}$, we can do a rolling sum over the last $m$ periods and then exponentiate to get the rolling product of the original values. This does not change any of the numbers – it&#39;s just a convenience. . The Result . Below you can see every day (row) of the posterior distribution plotted simultaneously. The posteriors start without much confidence (wide) and become progressively more confident (narrower) about the true value of $R_t$ . Plotting in the Time Domain with Credible Intervals . Since our results include uncertainty, we&#39;d like to be able to view the most likely value of $R_t$ along with its highest-density interval. . Repeat the Process for Every State . Plot All US States . Export Data to CSV .",
            "url": "https://meghanabhange.github.io/CovidSeer/2020/04/14/RealtimeR0.html",
            "relUrl": "/2020/04/14/RealtimeR0.html",
            "date": " • Apr 14, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "KA SEIRSPlus",
            "content": "district_maps = {} for dis in list(district[&quot;Karnataka&quot;][&quot;districtData&quot;].keys()): sel = process.extractOne(dis, ka_df[&quot;District&quot;]) if dis == &quot;Kalaburagi&quot;: district_maps[&quot;Gulbarga&quot;] = dis else: district_maps[sel[0]] = dis district_maps . {&#39;Bangalore&#39;: &#39;Bengaluru&#39;, &#39;Gulbarga&#39;: &#39;Kalaburagi&#39;, &#39;Kodagu&#39;: &#39;Kodagu&#39;, &#39;Chikkaballapura&#39;: &#39;Chikkaballapura&#39;, &#39;Mysore&#39;: &#39;Mysuru&#39;, &#39;Dharwad&#39;: &#39;Dharwad&#39;, &#39;Uttara Kannada&#39;: &#39;Uttara Kannada&#39;, &#39;Dakshina Kannada&#39;: &#39;Dakshina Kannada&#39;, &#39;Udupi&#39;: &#39;Udupi&#39;, &#39;Chitradurga&#39;: &#39;Chitradurga&#39;, &#39;Tumkur&#39;: &#39;Tumakuru&#39;, &#39;Davanagere&#39;: &#39;Davanagere&#39;, &#39;Bellary&#39;: &#39;Ballari&#39;, &#39;Bidar&#39;: &#39;Bidar&#39;, &#39;Bagalkot&#39;: &#39;Bagalkote&#39;, &#39;Belgaum&#39;: &#39;Belagavi&#39;, &#39;Bangalore Rural&#39;: &#39;Bengaluru Rural&#39;, &#39;Gadag&#39;: &#39;Gadag&#39;, &#39;Mandya&#39;: &#39;Mandya&#39;} . ka_df[&quot;CaseCounts&quot;] = ka_df[&quot;District&quot;].apply( lambda x: district[&quot;Karnataka&quot;][&quot;districtData&quot;][district_maps[x]][&quot;confirmed&quot;] if x in district_maps.keys() else 0 ) ka_df . District Population Inflow CaseCounts . 0 Bagalkot | 1889752 | 26 | 5 | . 1 Bangalore | 8612474 | 7315 | 59 | . 2 Belgaum | 4779661 | 16 | 7 | . 3 Bellary | 2452595 | 44 | 6 | . 4 Bidar | 1703300 | 0 | 10 | . 5 Bijapur | 2177331 | 0 | 0 | . 6 Chamarajanagar | 1020791 | 6 | 0 | . 7 Chikkaballapura | 1255104 | 9 | 11 | . 8 Chikmagalur | 1137961 | 27 | 0 | . 9 Chitradurga | 1659456 | 0 | 1 | . 10 Dakshina Kannada | 2089649 | 756 | 10 | . 11 Davanagere | 1945497 | 58 | 2 | . 12 Dharwad | 1847023 | 39 | 1 | . 13 Gadag | 1064570 | 16 | 1 | . 14 Gulbarga | 2566326 | 4 | 9 | . 15 Hassan | 1776421 | 75 | 0 | . 16 Haveri | 1597668 | 5 | 0 | . 17 Kodagu | 554519 | 47 | 1 | . 18 Kolar | 1536401 | 6 | 0 | . 19 Koppal | 1389920 | 6 | 0 | . 20 Mandya | 1805769 | 8 | 4 | . 21 Mysore | 3001127 | 231 | 35 | . 22 Raichur | 1928812 | 41 | 0 | . 23 Ramanagara | 1082636 | 8 | 0 | . 24 Shimoga | 1752753 | 99 | 0 | . 25 Tumkur | 2678980 | 78 | 2 | . 26 Udupi | 1177361 | 414 | 4 | . 27 Uttara Kannada | 1437169 | 23 | 10 | . 28 Vijayapura | 2177331 | 4 | 0 | . 29 Yadgir | 1174271 | 0 | 0 | . 30 Bangalore Rural | 900000 | 100 | 3 | . District vs AtRisk . District day14 day21 . 0 Bagalkot | 0 | 0 | . 1 Bangalore | 4 | 20 | . 2 Belgaum | 0 | 0 | . 3 Bellary | 0 | 0 | . 4 Bidar | 0 | 0 | . 5 Bijapur | 0 | 0 | . 6 Chamarajanagar | 0 | 0 | . 7 Chikkaballapura | 0 | 0 | . 8 Chikmagalur | 0 | 0 | . 9 Chitradurga | 0 | 0 | . 10 Dakshina Kannada | 0 | 2 | . 11 Davanagere | 0 | 0 | . 12 Dharwad | 0 | 0 | . 13 Gadag | 0 | 0 | . 14 Gulbarga | 0 | 0 | . 15 Hassan | 0 | 0 | . 16 Haveri | 0 | 0 | . 17 Kodagu | 0 | 0 | . 18 Kolar | 0 | 0 | . 19 Koppal | 0 | 0 | . 20 Mandya | 0 | 0 | . 21 Mysore | 0 | 0 | . 22 Raichur | 0 | 0 | . 23 Ramanagara | 0 | 0 | . 24 Shimoga | 0 | 0 | . 25 Tumkur | 0 | 0 | . 26 Udupi | 0 | 1 | . 27 Uttara Kannada | 0 | 0 | . 28 Vijayapura | 0 | 0 | . 29 Yadgir | 0 | 0 | . 30 Bangalore Rural | 0 | 0 | . Map Plot . Map .",
            "url": "https://meghanabhange.github.io/CovidSeer/2020/04/08/KarnatakaAltair.html",
            "relUrl": "/2020/04/08/KarnatakaAltair.html",
            "date": " • Apr 8, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "Assam District Analysis",
            "content": "At Risk . district day14 day21 . 0 Nagaon | 15219 | 20152 | . 1 Dhubri | 10210 | 13885 | . 2 Sonitpur | 10932 | 13757 | . 3 Cachar | 9018 | 12362 | . 4 Barpeta | 8965 | 12073 | . 5 Kamrup | 8147 | 10827 | . 6 Tinsukia | 6639 | 9420 | . 7 Dibrugarh | 7788 | 9482 | . 8 Kamrup Metropolitan | 6394 | 8912 | . 9 Karimganj | 6728 | 8775 | . 10 Sivasagar | 5898 | 8184 | . 11 Jorhat | 6037 | 7804 | . 12 Golaghat | 5667 | 7607 | . 13 Lakhimpur | 5962 | 7452 | . 14 Goalpara | 5408 | 7193 | . 15 Morigaon | 5753 | 6838 | . 16 Karbi Anglong | 4974 | 6808 | . 17 Baksa | 5242 | 6788 | . 18 Darrang | 5432 | 6638 | . 19 Kokrajhar | 4045 | 6226 | . 20 Udalguri | 4490 | 5936 | . 21 Nalbari | 4200 | 5509 | . 22 Bongaigaon | 3884 | 5264 | . 23 Dhemaji | 3993 | 4906 | . 24 Hailakandi | 3450 | 4696 | . 25 Chirang | 2569 | 3438 | . 26 Dima Hasao | 1215 | 1530 | . Map Plot . Infections Plot .",
            "url": "https://meghanabhange.github.io/CovidSeer/2020/04/08/AssamAltair.html",
            "relUrl": "/2020/04/08/AssamAltair.html",
            "date": " • Apr 8, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "KA SEIRSPlus",
            "content": "District vs AtRisk . District Day 14 Infections Day 21 Infections . 0 Bagalkot | 4097 | 11647 | . 1 Bangalore | 49826 | 68475 | . 2 Belgaum | 5457 | 26105 | . 3 Bellary | 5835 | 15385 | . 4 Bidar | 0 | 0 | . 5 Bijapur | 0 | 0 | . 6 Chamarajanagar | 1554 | 5885 | . 7 Chikkaballapura | 2093 | 7361 | . 8 Chikmagalur | 2963 | 7260 | . 9 Chitradurga | 0 | 0 | . 10 Dakshina Kannada | 9811 | 14721 | . 11 Davanagere | 5426 | 12573 | . 12 Dharwad | 4636 | 11703 | . 13 Gadag | 2382 | 6601 | . 14 Gulbarga | 1827 | 12831 | . 15 Hassan | 5453 | 11685 | . 16 Haveri | 1756 | 8664 | . 17 Kodagu | 2010 | 3756 | . 18 Kolar | 1907 | 8524 | . 19 Koppal | 1818 | 7787 | . 20 Mandya | 2394 | 10142 | . 21 Mysore | 10651 | 20258 | . 22 Raichur | 4852 | 12227 | . 23 Ramanagara | 1829 | 6365 | . 24 Shimoga | 5790 | 11683 | . 25 Tumkur | 7420 | 17291 | . 26 Udupi | 5505 | 8290 | . 27 Uttara Kannada | 3288 | 8948 | . 28 Vijayapura | 1730 | 11113 | . 29 Yadgir | 0 | 0 | . Map Plot . . .",
            "url": "https://meghanabhange.github.io/CovidSeer/2020/04/04/SEIRSKA.html",
            "relUrl": "/2020/04/04/SEIRSKA.html",
            "date": " • Apr 4, 2020"
        }
        
    
  
    
        ,"post5": {
            "title": "KA Backtesting",
            "content": "District Vs AtRisk . District AtRisk . 0 Kalaburagi | 860 | . 1 Kodagu | 9420 | . 2 Chikkaballapura | 1880 | . 3 Mysuru | 46260 | . 4 Dharwad | 7820 | . 5 Uttara Kannada | 4680 | . 6 Dhakshina Kannada | 151302 | . 7 Udupi | 82820 | . 8 Tumkur | 15620 | . 9 Shivamogga | 19801 | . 10 Chikkamagaluru | 5400 | . 11 Davanagere | 11600 | . 12 Ballari | 8800 | . 13 Raichur | 8200 | . 14 Belagavi | 3200 | . 15 Vijayapura | 800 | . 16 Gadag | 3200 | . 17 Haveri | 1000 | . 18 Hassan | 15000 | . 19 Bagalkote | 5200 | . 20 Bengaluru (Urban, Rural &amp; BBMP) | 1463000 | . 21 Chamrajanagara | 1200 | . 22 Kolar | 1200 | . 23 Kolara | 1600 | . 24 Koppala | 1200 | . 25 Mandya | 1600 | . 26 Ramanagara | 1600 | . Map Plot . . .",
            "url": "https://meghanabhange.github.io/CovidSeer/2020/04/04/BacktestingKA.html",
            "relUrl": "/2020/04/04/BacktestingKA.html",
            "date": " • Apr 4, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://meghanabhange.github.io/CovidSeer/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

}